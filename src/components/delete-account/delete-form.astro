---
// Página para solicitar eliminación de cuenta
---

<div class="mx-2 max-w-2xl sm:mx-auto">
    <div class="bg-color-secondary border border-slate-300 rounded-lg shadow-xl shadow-slate-400/30 p-8" data-aos="fade-up">
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 border-2 border-slate-300 shadow-xl shadow-slate-400/30">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
        <h1 class="text-3xl font-bold text-slate-100 mb-2">Solicitar Eliminación de Cuenta</h1>
        <p class="text-slate-200">Lamentamos que quieras irte. Por favor, completa el formulario para procesar tu solicitud.</p>
      </div>
  
      <!-- Información importante -->
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <div class="flex items-start">
          <svg class="w-5 h-5 text-black mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <h3 class="text-sm font-medium text-black">Información Importante</h3>
            <p class="text-sm text-black mt-1">
              Tu solicitud será revisada por nuestro equipo. El proceso de eliminación puede tomar hasta 30 días hábiles. 
              Recibirás una confirmación por email cuando se complete.
            </p>
          </div>
        </div>
      </div>
  
      <!-- Formulario -->
      <form id="deleteAccountForm" class="space-y-6 text-slate-100">
        <!-- Email -->
        <div>
          <label for="email" class="block text-sm font-medium text-slate-100 mb-2">
            Email de tu cuenta <span class="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
            placeholder="tu@email.com"
          />
          <p class="text-sm text-slate-100 mt-1">Ingresa el email asociado a tu cuenta de Mannwork</p>
        </div>
  
        <!-- Motivo -->
        <div>
          <label for="reason" class="block text-sm font-medium text-slate-100 mb-2">
            Motivo de la eliminación <span class="text-red-500">*</span>
          </label>
          <textarea
            id="reason"
            name="reason"
            required
            maxlength="500"
            rows="4"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors resize-none"
            placeholder="Por favor, comparte con nosotros el motivo de tu decisión. Esto nos ayuda a mejorar nuestros servicios."
          ></textarea>
          <div class="flex justify-between items-center mt-1">
            <p class="text-sm text-slate-100">Máximo 500 caracteres</p>
            <span id="charCount" class="text-sm text-slate-100">0/500</span>
          </div>
        </div>
  
        <!-- Confirmación -->
        <div class="flex items-start">
          <input
            type="checkbox"
            id="confirm"
            name="confirm"
            required
            class="w-4 h-4 text-primary border-gray-300 rounded focus:ring-primary mt-1"
          />
          <label for="confirm" class="ml-3 text-sm text-slate-100">
            Confirmo que entiendo que la eliminación de mi cuenta es <strong>permanente e irreversible</strong>. 
            Perderé acceso a todos mis datos, historial de servicios y configuraciones.
          </label>
        </div>
  
        <!-- Botón de envío -->
        <button
          type="submit"
          class="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
        >
          Enviar Solicitud de Eliminación
        </button>
      </form>
  
      <!-- Mensaje de éxito (oculto inicialmente) -->
      <div id="successMessage" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <p class="text-green-800 font-medium">Solicitud enviada exitosamente</p>
        </div>
        <p class="text-green-700 text-sm mt-1">
          Hemos recibido tu solicitud. Te enviaremos una confirmación por email en los próximos días.
        </p>
      </div>
  
      <!-- Mensaje de error (oculto inicialmente) -->
      <div id="errorMessage" class="hidden mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-red-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="text-red-800 font-medium">Error al enviar la solicitud</p>
        </div>
        <p id="errorText" class="text-red-700 text-sm mt-1">
          Ha ocurrido un error. Por favor, intenta nuevamente.
        </p>
      </div>
    </div>
  </div>

  <script>
    import { supabase } from "@lib/supabase";

    interface FormElements {
      form: HTMLFormElement;
      reasonTextarea: HTMLTextAreaElement;
      charCount: HTMLSpanElement;
      successMessage: HTMLDivElement;
      errorMessage: HTMLDivElement;
      errorText: HTMLParagraphElement;
    }

    interface ValidationResult {
      isValid: boolean;
      message?: string;
    }

    class DeleteAccountForm {
      private elements!: FormElements;
      private readonly MAX_CHARACTERS = 500;
      private readonly WARNING_THRESHOLD = 50;

      constructor() {
        this.initializeElements();
        this.setupEventListeners();
      }

      private initializeElements(): void {
        const form = document.getElementById('deleteAccountForm') as HTMLFormElement;
        const reasonTextarea = document.getElementById('reason') as HTMLTextAreaElement;
        const charCount = document.getElementById('charCount') as HTMLSpanElement;
        const successMessage = document.getElementById('successMessage') as HTMLDivElement;
        const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
        const errorText = document.getElementById('errorText') as HTMLParagraphElement;

        if (!form || !reasonTextarea || !charCount || !successMessage || !errorMessage || !errorText) {
          throw new Error('Required form elements not found');
        }

        this.elements = {
          form,
          reasonTextarea,
          charCount,
          successMessage,
          errorMessage,
          errorText
        };
      }

      private setupEventListeners(): void {
        this.elements.reasonTextarea.addEventListener('input', this.handleCharacterCount.bind(this));
        this.elements.form.addEventListener('submit', this.handleFormSubmit.bind(this));
      }

      private handleCharacterCount(): void {
        const currentLength = this.elements.reasonTextarea.value.length;
        const remaining = this.MAX_CHARACTERS - currentLength;
        
        this.elements.charCount.textContent = `${currentLength}/${this.MAX_CHARACTERS}`;
        
        if (remaining < this.WARNING_THRESHOLD) {
          this.elements.charCount.classList.add('text-red-500');
          this.elements.charCount.classList.remove('text-gray-400');
        } else {
          this.elements.charCount.classList.remove('text-red-500');
          this.elements.charCount.classList.add('text-gray-400');
        }
      }

      private validateForm(email: string, reason: string, confirm: boolean): ValidationResult {
        if (!email || !reason || !confirm) {
          return {
            isValid: false,
            message: 'Por favor, completa todos los campos requeridos.'
          };
        }

        if (reason.length > this.MAX_CHARACTERS) {
          return {
            isValid: false,
            message: `El motivo no puede exceder los ${this.MAX_CHARACTERS} caracteres.`
          };
        }

        if (!this.isValidEmail(email)) {
          return {
            isValid: false,
            message: 'Por favor, ingresa un email válido.'
          };
        }

        return { isValid: true };
      }

      private isValidEmail(email: string): boolean {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      private async handleFormSubmit(e: Event): Promise<void> {
        e.preventDefault();
        
        const formData = new FormData(this.elements.form);
        const email = formData.get('email') as string;
        const reason = formData.get('reason') as string;
        const confirm = formData.get('confirm') === 'on';

        // Validación
        const validation = this.validateForm(email, reason, confirm);
        if (!validation.isValid) {
          this.showError(validation.message!);
          return;
        }

        try {
          await this.submitToSupabase(email, reason);
          this.handleSuccess();
        } catch (error) {
          console.error('Error submitting form:', error);
          this.showError('Error al enviar la solicitud. Por favor, intenta nuevamente.');
        }
      }

      private async submitToSupabase(email: string, reason: string): Promise<void> {
        // TODO: Implementar envío a Supabase
        // Ejemplo de estructura:
        const { error } = await supabase
          .from('delete_account_requests')
          .insert([{
            email,
            reason,
            created_at: new Date().toISOString()
          }]);
        
        if (error) throw error;
      }

      private handleSuccess(): void {
        // Resetear formulario
        this.elements.form.reset();
        this.elements.charCount.textContent = '0/500';
        this.elements.charCount.classList.remove('text-red-500');
        this.elements.charCount.classList.add('text-gray-400');
        
        // Mostrar mensaje de éxito
        this.hideMessages();
        this.elements.successMessage.classList.remove('hidden');
        
        // Ocultar mensaje después de 5 segundos
        setTimeout(() => {
          this.elements.successMessage.classList.add('hidden');
        }, 5000);
      }

      private showError(message: string): void {
        this.hideMessages();
        this.elements.errorText.textContent = message;
        this.elements.errorMessage.classList.remove('hidden');
      }

      private hideMessages(): void {
        this.elements.successMessage.classList.add('hidden');
        this.elements.errorMessage.classList.add('hidden');
      }
    }

    // Inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
      try {
        new DeleteAccountForm();
      } catch (error) {
        console.error('Error initializing delete account form:', error);
      }
    });
  </script>